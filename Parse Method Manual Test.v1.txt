//Created by Adam Rison
//Updated by Adam Rison 7/16/2015

/**The following code was added to the main file of our program for manual testing with the Parse database:
 *CS1530CoffeeImporter>src>main>java>coffeeimport>CoffeeImportApplication.class
 *
 *These tests were ran mulitple times with varying conditions to ensure no bugs or errors were present.
 *The following lines of code represent the a fraction of the testing that was performed.  You can
 *copy and paste the code back into the CoffeeImportApplication class right after the initialization of the
 *ParseAccessor to see the results in Parse.
 *
 */

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Only one user exists in the database during this test.  This user has the username "User"
             * and password "Password"
             *
             * Part 1:
             *  The following code logs into the Parse database with the username "User"
             *  and the password "Password".  If the login is successful, that means that
             *  a user with the name "User" exists and has the password "Password"
             *  If the login was failed, there is no such user or connection to Parse was
             *  unsuccessful.
             *
             *  Part 2:
             *  The following code attempts to log into the Parse database with an
             *  invalid username, "Alice", and password, "Hax".  The test is successful
             *  if there is a failure to log in, because no such ParseUser exists.  The
             *  test fails if for some reason "Alice" does log in and "all our base are belong to them".
             *
             *  Part 3:
             *  The following code attempts to log into the Parse database with a
             *  correct username, "User", but an incorrect password, "AliceInDisguise".
             *  The test fails if there is a successful login, and will throw an exception.
             *  The test passes if there is not a successful login, implying that the login
             *  system works appropriately.
             */

        ///////////////////////////////////////////////
            //Part 1: Successful Login Attempt
            ParseUser parseUser1 = parseAccessor.verifyParseUser("User", "Password");
            if(parseUser1 == null){
                    throw new Exception("No good!");
            }
            else{
                    System.out.println("Success!");
            }

            //Part 2: Non-successful Login Attempt (No such user)
            ParseUser parseUser2 = parseAccessor.verifyParseUser("Alice", "Hax");
            if(parseUser2 == null){     //This user doesn't exist
                    System.out.println("Stopped the bad guy!");
            }
            else{       //The user actually does exist and successfully logged on
                    throw new Exception("Something went wrong.");
            }

            //Part 3: Non-successful Login Attempt (Wrong Password)
            ParseUser parseUser3 = parseAccessor.verifyParseUser("User", "AliceInDisguise");
            if(parseUser3 == null){     //This user exists, but did not log in because of the wrong password
                    System.out.println("Stopped the bad guy!");
            }
            else{       //The user exists and logged in with the wrong password; Bad!
                    throw new Exception("Something went wrong.");
            }

        ////////////////////////////////////////////////

            /**
             * Results from Parse:
             *
             * Part 1 prints "Success" indicating a successful log in.  The
             * user "User" was successfully retrieved.
             * Test: Success
             *
             * Part 2 prints "Stopped the bad guy!", implying that the login
             * attempt was unsuccessful because the user "Alice" does not exist.
             * Test: Success
             *
             * Part 3 prints "Stopped the bad guy!", implying that the login
             * attempt was unsuccessful because the wrong password was used.
             * Test: Success
             *
             */




        //Initialize Objects
        Shipment testShipment = new Shipment();
        Product productA = new Product();
        Product productB = new Product();
        Product productC = new Product();


        //Set ProductA's values
        productA.setProductCost(7.99);
        productA.setPriceListedForSale(9.97);
        productA.setHasBeenSold(false);
        productA.setProductName("Tijuana's Finest Beans");
        productA.setProductId("XYZ");
        productA.setProductWeight(4.02);

        //Set ProductB's values
        productB.setProductCost(8.95);
        productB.setPriceListedForSale(12.21);
        productB.setHasBeenSold(false);
        productB.setProductName("Coffee Crafters' Best");
        productB.setProductId("ABC");
        productB.setProductWeight(3.80);

        //Set Shipment Values  (Also test null Date case)
        testShipment.setOrigin("Mexico");
        testShipment.setWeight((double)Math.round(1000.0*(productA.getProductWeight()+productB.getProductWeight()))/1000);        //Combined weight
        testShipment.setProductCost((double) Math.round(100.0*(productA.getProductCost()+productB.getProductCost()))/100);       //Combined price
        testShipment.setPricePerKg((double)Math.round(100.0*testShipment.getProductCost()/testShipment.getWeight())/100);
        testShipment.setShipmentId("Id.123");
        testShipment.setTotalCost(24.91);
        testShipment.setShippingCost((double) Math.round(100*(testShipment.getTotalCost()-testShipment.getProductCost()))/100);

        //Add Products to shipment's list and set products' shipmentID
        testShipment.addProductToShipment(productA);
        testShipment.addProductToShipment(productB);

        productA.setShipmentId(testShipment.getShipmentId());
        productB.setShipmentId(testShipment.getShipmentId());


        //Send Everything to Parse
        parseAccessor.updateShipment(testShipment);
        parseAccessor.updateProduct(productA);
        parseAccessor.updateProduct(productB);

        //Verify that the following objects have made it to Parse
////////////////////////////////////////////////////////////////////////////////

        /**Results in Parse:
         *  7/2/15
         * In Shipments Class:
         *
         *  objectId: Ow6TxIC1ko (Will be different upon generation of object)
         *  ShipmentID: Id.123
         *  createdAt: 2015-07-02T05:52:47.384Z
         *  updatedAt: 2015-07-02T05:52:47.384Z
         *  PricePerKg: 2.17
         *  Origin:  Mexico
         *  Weight: 7.82
         *  ShippingCost:  7.97
         *  TotalCost:  24.91
         *  ProductCost: 16.94
         *  DateReceived: Jan 1, 1200, 05:00  (Default case)
         *
         *
         * In Products Class:
         *
         *  (ProductA)
         *  objectId: liBQ116wRn  (Will be different upon generation of object)
         *  ProductID: XYZ
         *  createdAt: 2015-07-02T05:52:47.400Z
         *  updatedAt: 2015-07-02T05:52:47.400Z
         *  ShipmentID: Id.123
         *  ProductCost: 7.99
         *  Sold: false
         *  PriceSold: -1
         *  ProductName: Tijuana's Finest Beans
         *  Weight: 4.02
         *  PriceListedForSale: 9.97
         *
         *  (ProductB)
         *  objectId: nmNsTMJds5  (Will be different upon generation of object)
         *  ProductID: ABC
         *  createdAt: 2015-07-02T05:52:47.399Z
         *  updatedAt: 2015-07-02T05:52:47.399Z
         *  ShipmentID: Id.123
         *  ProductCost: 8.95
         *  Sold: false
         *  PriceSold: -1
         *  ProductName: Coffee Crafters' Best
         *  Weight: 3.80
         *  PriceListedForSale: 12.21
         *
         *  Test: Passed
         */

        parseAccessor.deleteShipment(testShipment);

        /**
         * Results in Parse:
         *
         * The shipment known as testShipment and both
         * its associated products, productA and productB
         * have been removed from the Parse database
         *
         * Upon running it a second time, no errors or exceptions
         * occur and no data corrupt appears in Parse.
         *
         *  Test: Passed
         */

        productC.setProductCost(12.68);
        productC.setPriceListedForSale(18.14);
        productC.setHasBeenSold(true);
        productC.setPriceSold(12.68);
        productC.setProductName("Alaska's Impossible Coffee");
        productC.setProductId("GHI");
        productC.setProductWeight(1.39);

        parseAccessor.updateProduct(productC);

        /**
         * Results in Parse:
         *
         * (ProductC)
         *  objectId: jR4Ot3fqyx  (Will be different upon generation of object)
         *  ProductID: GHI
         *  createdAt: 2015-07-04T02:29:21.717Z
         *  updatedAt: 2015-07-04T02:29:21.717Z
         *  ShipmentID: ""
         *  ProductCost: 12.68
         *  Sold: true
         *  PriceSold: 12.68
         *  ProductName: Alaska's Impossible Coffee
         *  Weight: 1.39
         *  PriceListedForSale: 18.14
         *
         * Test: Passed
         */

        parseAccessor.deleteProduct(productC);

        /**
         * Results in Parse:
         *
         * The Product known as "productC" and its
         *  associated values have been completely
         *  removed from the Parse database.
         *
         *  Upon running it a second time, no errors or exceptions
         *  occur and no data corrupt appears in Parse.
         *
         *  Test: Passed
         */


            //Set a date for the shipment
            testShipment.setDateReceived(new SimpleDateFormat("yyyy-MM-dd").parse("2015-05-21"));
            //Store it into Parse again and check if the date was properly stored
            parseAccessor.updateShipment(testShipment);

        /**
         * The point of this test was to see if dates are properly stored in Parse for Shipments
         * 
         * Results in Parse:
         *
         * In Shipments Class:
         *
         *  objectId: Ow6TxIC1ko (Will be different upon generation of object)
         *  ShipmentID: Id.123
         *  createdAt: 2015-07-02T05:52:47.384Z
         *  updatedAt: 2015-07-02T05:52:47.384Z
         *  PricePerKg: 2.17
         *  Origin:  Mexico
         *  Weight: 7.82
         *  ShippingCost:  7.97
         *  TotalCost:  24.91
         *  ProductCost: 16.94
         *  DateReceived:  May 21, 2015  (Correct Date)
         *
         * 
         *  Test: Passed
         */
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////